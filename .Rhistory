kmeans.unigram$withinss
kmeans.unigram$tot.withinss
clu <- 3
centroid.i <- kmeans.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.unigram$centers, 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
k <- 4
set.seed(12345)
#eliminate rows with NA
clinton.unigram.norm.omitNA <- clinton.unigram.norm[complete.cases(clinton.unigram.norm), ]
kmeans.norm.unigram <- kmeans(clinton.unigram.norm.omitNA, centers = k, nstart = 3)
#Cluster assignments
table(kmeans.norm.unigram$cluster)
#Within-cluster variation
kmeans.norm.unigram$withinss
kmeans.norm.unigram$tot.withinss
clu <- 3
centroid.i <- kmeans.norm.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.norm.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 4
centroid.i <- kmeans.norm.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.norm.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
k <- 6
set.seed(12345)
#eliminate rows with NA
clinton.unigram.norm.omitNA <- clinton.unigram.norm[complete.cases(clinton.unigram.norm), ]
kmeans.norm.unigram <- kmeans(clinton.unigram.norm.omitNA, centers = k, nstart = 3)
#Cluster assignments
table(kmeans.norm.unigram$cluster)
#Within-cluster variation
kmeans.norm.unigram$withinss
kmeans.norm.unigram$tot.withinss
k <- 4
set.seed(12345)
#eliminate rows with NA
clinton.unigram.norm.omitNA <- clinton.unigram.norm[complete.cases(clinton.unigram.norm), ]
kmeans.norm.unigram <- kmeans(clinton.unigram.norm.omitNA, centers = k, nstart = 3)
#Cluster assignments
table(kmeans.unigram$cluster)
#Within-cluster variation
kmeans.unigram$withinss
kmeans.unigram$tot.withinss
k <- 6
set.seed(12345)
kmeans.unigram <- kmeans(clinton.unigram, centers = k, nstart = 3)
k <- 4
set.seed(12345)
kmeans.unigram <- kmeans(clinton.unigram, centers = k, nstart = 3)
#Cluster assignments
table(kmeans.unigram$cluster)
#Within-cluster variation
kmeans.unigram$withinss
kmeans.unigram$tot.withinss
k <- 10
set.seed(12345)
kmeans.unigram <- kmeans(clinton.unigram, centers = k, nstart = 3)
#Cluster assignments
table(kmeans.unigram$cluster)
#Within-cluster variation
kmeans.unigram$withinss
kmeans.unigram$tot.withinss
k <- 4
set.seed(12345)
kmeans.unigram <- kmeans(clinton.unigram, centers = k, nstart = 3)
#Cluster assignments
table(kmeans.unigram$cluster)
#Within-cluster variation
kmeans.unigram$withinss
kmeans.unigram$tot.withinss
clu <- 3
centroid.i <- kmeans.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
k <- 4
set.seed(12345)
#eliminate rows with NA
clinton.unigram.norm.omitNA <- clinton.unigram.norm[complete.cases(clinton.unigram.norm), ]
kmeans.norm.unigram <- kmeans(clinton.unigram.norm.omitNA, centers = k, nstart = 3)
#analysis of clinton unigram
row_lengths = apply(clinton.unigram, 1, function(z) sqrt(sum(z^2)))
clinton.unigram.norm = clinton.unigram/row_lengths
head(clinton.unigram.norm)
row_lengths = apply(clinton.unigram, 1, function(z) sqrt(sum(z^2)))
clinton.unigram.norm = clinton.unigram/row_lengths
k <- 4
set.seed(12345)
#eliminate rows with NA
clinton.unigram.norm.omitNA <- clinton.unigram.norm[complete.cases(clinton.unigram.norm), ]
kmeans.norm.unigram <- kmeans(clinton.unigram.norm.omitNA, centers = k, nstart = 3)
#Cluster assignments
table(kmeans.norm.unigram$cluster)
#Within-cluster variation
kmeans.norm.unigram$withinss
kmeans.norm.unigram$tot.withinss
clu <- 4
centroid.i <- kmeans.norm.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.norm.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 3
centroid.i <- kmeans.norm.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.norm.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 2
centroid.i <- kmeans.norm.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.norm.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 1
centroid.i <- kmeans.norm.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.norm.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
#Evaluate each clustering model using total within-cluster variation (Elbow Method)
with.clu <- c()
kmeans.unigram.list <- list()
for(k in 1:10){
temp.kmeans <- kmeans(clinton.unigram, centers = k, nstart = 3)
kmeans.unigram.list[k] <- temp.kmeans
with.clu[k] <- temp.kmeans$tot.withinss
}
with.clu
kmeans.unigram <- kmeans.unigram.list[10]
kmeans.unigram <- kmeans.unigram.list[[10]]
View(kmeans.unigram.list)
kmeans.unigram <- kmeans(clinton.unigram, centers = 10, nstart = 3)
kmeans.unigram <- kmeans(clinton.unigram, centers = 4, nstart = 3)
# SET UP
rm(list = ls())
library(tidyr)
emails <- read.csv("Clinton.csv")
table(emails$Recipient)
# create normalized version of dtm
dtm <- emails[, 10:3009]
row_lengths = apply(dtm, 1, function(z) sqrt(sum(z^2)))
dtm_norm <- dtm/row_lengths
dtm_norm <- na.omit(dtm_norm)
# -------------------------
# K-MEANS CLUSTERING
k <- 10
k10_norm <- kmeans(dtm_norm, centers = k, nstart = 3)
k10 <- kmeans(dtm, centers = k, nstart = 3)
table(k10$cluster)
# view clusters
k10_freqWords <- data.frame(
cluster1 = rep(NA, 10),
cluster2 = rep(NA, 10),
cluster3 = rep(NA, 10),
cluster4 = rep(NA, 10),
cluster5 = rep(NA, 10),
cluster6 = rep(NA, 10),
cluster7 = rep(NA, 10),
cluster8 = rep(NA, 10),
cluster9 = rep(NA, 10),
cluster10 = rep(NA, 10)
)
# Most frequent words
for (i in 1:10) {
clu <- i
centroid.i <- k10$centers[clu,]
k10_freqWords[,i] <- names(sort(centroid.i, decreasing = T)[1:10])
}
# Most distinct words
k10_distWords <- data.frame(
cluster1 = rep(NA, 10),
cluster2 = rep(NA, 10),
cluster3 = rep(NA, 10),
cluster4 = rep(NA, 10),
cluster5 = rep(NA, 10),
cluster6 = rep(NA, 10),
cluster7 = rep(NA, 10),
cluster8 = rep(NA, 10),
cluster9 = rep(NA, 10),
cluster10 = rep(NA, 10)
)
for (i in 1:10) {
clu <- i
centroid.i <- k10$centers[clu,]
centroid.noti <- apply(k10$centers[-clu,], 2, mean)
k10_distWords[,i] <- names(sort(centroid.i - centroid.noti, decreasing = T)[1:10])
}
rm(k10, k10_distWords, k10_freqWords) #remove irrelevant variables
# -----------------------
# ANALYSIS ACROSS TIME
# Bin into years
head(emails$DateSent)
emails <-separate(emails, DateSent, c("year", "month") )
setwd("C:/Users/james/Desktop/UCSD/POLI175/DT2")
# SET UP
rm(list = ls())
library(tidyr)
emails <- read.csv("Clinton.csv")
table(emails$Recipient)
# create normalized version of dtm
dtm <- emails[, 10:3009]
row_lengths = apply(dtm, 1, function(z) sqrt(sum(z^2)))
dtm_norm <- dtm/row_lengths
dtm_norm <- na.omit(dtm_norm)
# -------------------------
# K-MEANS CLUSTERING
k <- 10
k10_norm <- kmeans(dtm_norm, centers = k, nstart = 3)
k10 <- kmeans(dtm, centers = k, nstart = 3)
table(k10$cluster)
# view clusters
k10_freqWords <- data.frame(
cluster1 = rep(NA, 10),
cluster2 = rep(NA, 10),
cluster3 = rep(NA, 10),
cluster4 = rep(NA, 10),
cluster5 = rep(NA, 10),
cluster6 = rep(NA, 10),
cluster7 = rep(NA, 10),
cluster8 = rep(NA, 10),
cluster9 = rep(NA, 10),
cluster10 = rep(NA, 10)
)
# Most frequent words
for (i in 1:10) {
clu <- i
centroid.i <- k10$centers[clu,]
k10_freqWords[,i] <- names(sort(centroid.i, decreasing = T)[1:10])
}
# Most distinct words
k10_distWords <- data.frame(
cluster1 = rep(NA, 10),
cluster2 = rep(NA, 10),
cluster3 = rep(NA, 10),
cluster4 = rep(NA, 10),
cluster5 = rep(NA, 10),
cluster6 = rep(NA, 10),
cluster7 = rep(NA, 10),
cluster8 = rep(NA, 10),
cluster9 = rep(NA, 10),
cluster10 = rep(NA, 10)
)
for (i in 1:10) {
clu <- i
centroid.i <- k10$centers[clu,]
centroid.noti <- apply(k10$centers[-clu,], 2, mean)
k10_distWords[,i] <- names(sort(centroid.i - centroid.noti, decreasing = T)[1:10])
}
rm(k10, k10_distWords, k10_freqWords) #remove irrelevant variables
# -----------------------
# ANALYSIS ACROSS TIME
# Bin into years
head(emails$DateSent)
emails <-separate(emails, DateSent, c("year", "month") )
deleteColumn <- function(keyword, dat){
newDat <- dat[,-which(names(dat) %in% c(keyword))]
return(newDat)
}
newDat <- deleteColumn(c("the", "for"),dtm_norm)
View(newDat)
deleteColumn <- function(keyword, dat){
newDat <- dat[,-which(names(dat) %in% c(keyword))]
return(newDat)
}
dtm_norm <- dtm/row_lengths
dtm_norm <- na.omit(dtm_norm)
deleteColumn <- function(keyword, dat){
newDat <- dat[,-which(names(dat) %in% keyword)]
return(newDat)
}
newDat <- deleteColumn(c("the", "for"),dtm_norm)
deleteColumn <- function(keyword, dat){
newDat <- dat[,-which(names(dat) %in% keyword)]
return(newDat)
}
newDat <- deleteColumn(c("the", "for"),dtm_norm)
deleteColumn <- function(keyword, dat){
newDat <- dat[,-which(names(dat) %in% keyword)]
return(newDat)
}
newDat <- deleteColumn(c("the", "for"),dtm_norm)
# SENTIMENT REGRESSION ANALYSIS
calcSentimentRegression <- function(keyword, dat) {
countPos = rep(NA, nrow(dat))
countNeg = rep(NA, nrow(dat))
keyword.counts = dat[,keyword]
for (i in 1:nrow(dat)) {
wordsIdx = which(t(dat[i,]) > 1)
wordNames <- colnames(dat)
words <- wordNames[wordsIdx]
countPos[i] = sum(as.numeric(words %in% pos))
countNeg[i] = sum(as.numeric(words %in% neg))
}
df <- data.frame(keyword = keyword.counts, countPos = countPos, countNeg = countNeg)
df$ratio <- df$countPos/(df$countPos + df$countNeg)
df$ratio[df$countNeg == 0 & df$countPos == 0] <- 0.5
return(lm(ratio ~ keyword, df))
}
# EXAMPLE
calcSentimentRegression("china", emails)
# -------------------
# function for sentiment analysis visualization
load("processedDTM.RData")
# -------------------
# function for sentiment analysis visualization
load("processedDTM.RData")
View(dtm_clean)
View(emails_clean)
calcSentimentRegression("china", dtm_clean)
# -------------------
# function that returns the model of sentiment analysis for a certain keyword
calcSentimentRegression <- function(keyword, dat) {
countPos = rep(NA, nrow(dat))
countNeg = rep(NA, nrow(dat))
keyword.counts = dat[,keyword]
for (i in 1:nrow(dat)) {
wordsIdx = which(t(dat[i,]) > 1)
wordNames <- colnames(dat)
words <- wordNames[wordsIdx]
countPos[i] = sum(as.numeric(words %in% pos))
countNeg[i] = sum(as.numeric(words %in% neg))
}
df <- data.frame(keyword = keyword.counts, countPos = countPos, countNeg = countNeg)
df$ratio <- df$countPos/(df$countPos + df$countNeg)
df$ratio[df$countNeg == 0 & df$countPos == 0] <- 0.5
return(lm(ratio ~ keyword, df))
}
calcSentimentRegression("china", dtm_clean)
neg <- unlist(read.table("negative-words.txt", stringsAsFactors = F))
pos <- unlist(read.table("positive-words.txt", stringsAsFactors = F))
neg <- unlist(read.table("negative-words.txt", stringsAsFactors = F))
pos <- unlist(read.table("positive-words.txt", stringsAsFactors = F))
View(emails_clean)
View(dtm_clean)
View(emails_clean)
View(dtm_clean)
calcSentimentRegression("china", dtm_clean)
dtm_2009_1 <- emails_clean[which(emails_clean$year == "2009" & (emails_clean$month == "1" | emails_clean$month == "2" | emails_clean$month == "1" )), ][11:2786]
View(dtm_2009_1)
dtm_2009_1 <- emails_clean[which(emails_clean$year == "2009" & (emails_clean$month == "01" | emails_clean$month == "02" | emails_clean$month == "03" )), ][11:2786]
View(dtm_2009_1)
dtm_2009_1 <- emails_clean[which(emails_clean$year == "2009" & (emails_clean$month == "01" | emails_clean$month == "02" | emails_clean$month == "03" )), ]
View(dtm_2009_1)
sentimentVisualization <- function(keyword, dat){
dtm_2009_1 <- emails_clean[which(emails_clean$year == "2009" & (emails_clean$month == "01" | emails_clean$month == "02" | emails_clean$month == "03" )), ][11:2786]
dtm_2009_2 <- emails_clean[which(emails_clean$year == "2009" & (emails_clean$month == "04" | emails_clean$month == "05" | emails_clean$month == "06" )), ][11:2786]
dtm_2009_3 <- emails_clean[which(emails_clean$year == "2009" & (emails_clean$month == "07" | emails_clean$month == "08" | emails_clean$month == "09" )), ][11:2786]
dtm_2009_4 <- emails_clean[which(emails_clean$year == "2009" & (emails_clean$month == "10" | emails_clean$month == "11" | emails_clean$month == "12" )), ][11:2786]
dtm_2010_1 <- emails_clean[which(emails_clean$year == "2010" & (emails_clean$month == "01" | emails_clean$month == "02" | emails_clean$month == "03" )), ][11:2786]
dtm_2010_2 <- emails_clean[which(emails_clean$year == "2010" & (emails_clean$month == "04" | emails_clean$month == "05" | emails_clean$month == "06" )), ][11:2786]
dtm_2010_3 <- emails_clean[which(emails_clean$year == "2010" & (emails_clean$month == "07" | emails_clean$month == "08" | emails_clean$month == "09" )), ][11:2786]
dtm_2010_4 <- emails_clean[which(emails_clean$year == "2010" & (emails_clean$month == "10" | emails_clean$month == "11" | emails_clean$month == "12" )), ][11:2786]
dtm_2011_1 <- emails_clean[which(emails_clean$year == "2011" & (emails_clean$month == "01" | emails_clean$month == "02" | emails_clean$month == "03" )), ][11:2786]
dtm_2011_2 <- emails_clean[which(emails_clean$year == "2011" & (emails_clean$month == "04" | emails_clean$month == "05" | emails_clean$month == "06" )), ][11:2786]
dtm_2011_3 <- emails_clean[which(emails_clean$year == "2011" & (emails_clean$month == "07" | emails_clean$month == "08" | emails_clean$month == "09" )), ][11:2786]
dtm_2011_4 <- emails_clean[which(emails_clean$year == "2011" & (emails_clean$month == "10" | emails_clean$month == "11" | emails_clean$month == "12" )), ][11:2786]
dtm_2012_1 <- emails_clean[which(emails_clean$year == "2012" & (emails_clean$month == "01" | emails_clean$month == "02" | emails_clean$month == "03" )), ][11:2786]
dtm_2012_2 <- emails_clean[which(emails_clean$year == "2012" & (emails_clean$month == "04" | emails_clean$month == "05" | emails_clean$month == "06" )), ][11:2786]
dtm_2012_3 <- emails_clean[which(emails_clean$year == "2012" & (emails_clean$month == "07" | emails_clean$month == "08" | emails_clean$month == "09" )), ][11:2786]
dtm_2012_4 <- emails_clean[which(emails_clean$year == "2012" & (emails_clean$month == "10" | emails_clean$month == "11" | emails_clean$month == "12" )), ][11:2786]
}
sentimentVisualization <- function(keyword, emails_clean){
dtm_2009_1 <- emails_clean[which(emails_clean$year == "2009" & (emails_clean$month == "01" | emails_clean$month == "02" | emails_clean$month == "03" )), ][11:2786]
dtm_2009_2 <- emails_clean[which(emails_clean$year == "2009" & (emails_clean$month == "04" | emails_clean$month == "05" | emails_clean$month == "06" )), ][11:2786]
dtm_2009_3 <- emails_clean[which(emails_clean$year == "2009" & (emails_clean$month == "07" | emails_clean$month == "08" | emails_clean$month == "09" )), ][11:2786]
dtm_2009_4 <- emails_clean[which(emails_clean$year == "2009" & (emails_clean$month == "10" | emails_clean$month == "11" | emails_clean$month == "12" )), ][11:2786]
dtm_2010_1 <- emails_clean[which(emails_clean$year == "2010" & (emails_clean$month == "01" | emails_clean$month == "02" | emails_clean$month == "03" )), ][11:2786]
dtm_2010_2 <- emails_clean[which(emails_clean$year == "2010" & (emails_clean$month == "04" | emails_clean$month == "05" | emails_clean$month == "06" )), ][11:2786]
dtm_2010_3 <- emails_clean[which(emails_clean$year == "2010" & (emails_clean$month == "07" | emails_clean$month == "08" | emails_clean$month == "09" )), ][11:2786]
dtm_2010_4 <- emails_clean[which(emails_clean$year == "2010" & (emails_clean$month == "10" | emails_clean$month == "11" | emails_clean$month == "12" )), ][11:2786]
dtm_2011_1 <- emails_clean[which(emails_clean$year == "2011" & (emails_clean$month == "01" | emails_clean$month == "02" | emails_clean$month == "03" )), ][11:2786]
dtm_2011_2 <- emails_clean[which(emails_clean$year == "2011" & (emails_clean$month == "04" | emails_clean$month == "05" | emails_clean$month == "06" )), ][11:2786]
dtm_2011_3 <- emails_clean[which(emails_clean$year == "2011" & (emails_clean$month == "07" | emails_clean$month == "08" | emails_clean$month == "09" )), ][11:2786]
dtm_2011_4 <- emails_clean[which(emails_clean$year == "2011" & (emails_clean$month == "10" | emails_clean$month == "11" | emails_clean$month == "12" )), ][11:2786]
dtm_2012_1 <- emails_clean[which(emails_clean$year == "2012" & (emails_clean$month == "01" | emails_clean$month == "02" | emails_clean$month == "03" )), ][11:2786]
dtm_2012_2 <- emails_clean[which(emails_clean$year == "2012" & (emails_clean$month == "04" | emails_clean$month == "05" | emails_clean$month == "06" )), ][11:2786]
dtm_2012_3 <- emails_clean[which(emails_clean$year == "2012" & (emails_clean$month == "07" | emails_clean$month == "08" | emails_clean$month == "09" )), ][11:2786]
dtm_2012_4 <- emails_clean[which(emails_clean$year == "2012" & (emails_clean$month == "10" | emails_clean$month == "11" | emails_clean$month == "12" )), ][11:2786]
}
sentimentVisualization("china", emails_clean)
q1 <- emails_clean[which(emails_clean$year == "2009" & (emails_clean$month == "01" | emails_clean$month == "02" | emails_clean$month == "03" )), ][11:2786]
q2 <- emails_clean[which(emails_clean$year == "2009" & (emails_clean$month == "04" | emails_clean$month == "05" | emails_clean$month == "06" )), ][11:2786]
q3 <- emails_clean[which(emails_clean$year == "2009" & (emails_clean$month == "07" | emails_clean$month == "08" | emails_clean$month == "09" )), ][11:2786]
q4 <- emails_clean[which(emails_clean$year == "2009" & (emails_clean$month == "10" | emails_clean$month == "11" | emails_clean$month == "12" )), ][11:2786]
q5 <- emails_clean[which(emails_clean$year == "2010" & (emails_clean$month == "01" | emails_clean$month == "02" | emails_clean$month == "03" )), ][11:2786]
q6 <- emails_clean[which(emails_clean$year == "2010" & (emails_clean$month == "04" | emails_clean$month == "05" | emails_clean$month == "06" )), ][11:2786]
q7 <- emails_clean[which(emails_clean$year == "2010" & (emails_clean$month == "07" | emails_clean$month == "08" | emails_clean$month == "09" )), ][11:2786]
q8 <- emails_clean[which(emails_clean$year == "2010" & (emails_clean$month == "10" | emails_clean$month == "11" | emails_clean$month == "12" )), ][11:2786]
q9 <- emails_clean[which(emails_clean$year == "2011" & (emails_clean$month == "01" | emails_clean$month == "02" | emails_clean$month == "03" )), ][11:2786]
q10 <- emails_clean[which(emails_clean$year == "2011" & (emails_clean$month == "04" | emails_clean$month == "05" | emails_clean$month == "06" )), ][11:2786]
q11 <- emails_clean[which(emails_clean$year == "2011" & (emails_clean$month == "07" | emails_clean$month == "08" | emails_clean$month == "09" )), ][11:2786]
q12 <- emails_clean[which(emails_clean$year == "2011" & (emails_clean$month == "10" | emails_clean$month == "11" | emails_clean$month == "12" )), ][11:2786]
q13 <- emails_clean[which(emails_clean$year == "2012" & (emails_clean$month == "01" | emails_clean$month == "02" | emails_clean$month == "03" )), ][11:2786]
q14 <- emails_clean[which(emails_clean$year == "2012" & (emails_clean$month == "04" | emails_clean$month == "05" | emails_clean$month == "06" )), ][11:2786]
q15 <- emails_clean[which(emails_clean$year == "2012" & (emails_clean$month == "07" | emails_clean$month == "08" | emails_clean$month == "09" )), ][11:2786]
q16 <- emails_clean[which(emails_clean$year == "2012" & (emails_clean$month == "10" | emails_clean$month == "11" | emails_clean$month == "12" )), ][11:2786]
qdf <- list(q1, q2)
View(qdf)
qdf <- list(q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11, q12, q13, q14, q15, q16)
View(qdf)
save(q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11, q12, q13, q14, q15, q16, file=emails_by_qtr.RData)
save(q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11, q12, q13, q14, q15, q16, file= "emails_by_qtr.RData")
emails_clean[,"china"]
# -------------------
# function that returns the model of sentiment analysis for a certain keyword
calcSentimentRegression <- function(keyword, dat) {
countPos = rep(NA, nrow(dat))
countNeg = rep(NA, nrow(dat))
keyword.counts = dat[,keyword]
for (i in 1:nrow(dat)) {
wordsIdx = which(t(dat[i,]) > 1)
wordNames <- colnames(dat)
words <- wordNames[wordsIdx]
countPos[i] = sum(as.numeric(words %in% pos))
countNeg[i] = sum(as.numeric(words %in% neg))
}
df <- data.frame(keyword = keyword.counts, countPos = countPos, countNeg = countNeg)
df$ratio <- df$countPos/(df$countPos + df$countNeg)
df$ratio[df$countNeg == 0 & df$countPos == 0] <- 0.5
return(lm(ratio ~ keyword, df))
}
calcSentimentRegression("china", dtm_clean)
calcSentimentRegression("china", q1)
calcSentimentRegression("china", q1)
temp <- calcSentimentRegression("china", q1)
summary(temp)
# -------------------
# function that returns the model of sentiment analysis for a certain keyword
calcSentimentRegression <- function(keyword, dat) {
countPos = c()
countNeg = c()
keyword.counts = dat[,keyword]
for (i in 1:nrow(dat)) {
wordsIdx = which(t(dat[i,]) > 1)
wordNames <- colnames(dat)
words <- wordNames[wordsIdx]
countPos[i] = sum(as.numeric(words %in% pos))
countNeg[i] = sum(as.numeric(words %in% neg))
}
df <- data.frame(keyword = keyword.counts, countPos = countPos, countNeg = countNeg)
df$ratio <- df$countPos/(df$countPos + df$countNeg)
df$ratio[df$countNeg == 0 & df$countPos == 0] <- 0.5
return(lm(ratio ~ keyword, df))
}
calcSentimentRegression("china", q5)
visual_by_qtr <- function(keyword, emails_clean){
}
library(ggplot2)
length(qdf)
qdf[1]
View(qdf)
coef <- c()
qdf[[1]]
visual_by_qtr <- function(keyword, df){
coef <- c()
for(i in 1:length(qdf)){
coef[i] <- calcSentimentRegression(keyword, qdf[[i]])
}
}
coef <- c()
for(i in 1:length(qdf)){
coef[i] <- calcSentimentRegression(keyword, qdf[[i]])
}
for(i in 1:length(qdf)){
coef[i] <- calcSentimentRegression("china", qdf[[i]])
}
ggplot(c(1,2,3,4))
ggplot(c(1,2,3,4)) + geom_point()
data.frame(c(1,2,3,4))
data.frame(coef = c(1,2,3,4))
coef <- c()
for(i in 1:length(qdf)){
coef[i] <- calcSentimentRegression("china", qdf[[i]])
}
warnings()
View(coef)
coef[[2]]
coef[[10]]
coef[[11]]
temp <- calcSentimentRegression("china", q5)
temp$rank
temp$coefficients
temp$assign
temp$df.residual
temp$terms
temp$call
temp$model
temp$qr
temp$df.residual
temp$xlevels
temp$coefficients[2]
names(temp$coefficients[2])
values(temp$coefficients[2])
temp$coefficients[[2]]
summary(temp)$coefficients
summary(temp)$coefficients[,4]
summary(temp)$coefficients[[4]]
summary(temp)$coefficients[[5]]
summary(temp)$coefficients[[9]]
summary(temp)$coefficients[[8]]
coef <- c()
for(i in 1:length(qdf)){
coef[i] <- calcSentimentRegression(keyword, qdf[[i]])[[2]]
}
for(i in 1:length(qdf)){
coef[i] <- calcSentimentRegression("libya", qdf[[i]])[[2]]
}
warnings()
coef
