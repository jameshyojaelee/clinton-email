m.centroid.noti <- apply(k6$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 3
centroid.i <- k6$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 4
centroid.i <- k6$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 5
centroid.i <- k6$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 6
centroid.i <- k6$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 1
centroid.i <- k6_norm$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6_norm$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 2
centroid.i <- k6_norm$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6_norm$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 3
centroid.i <- k6_norm$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6_norm$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 4
centroid.i <- k6_norm$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6_norm$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 5
centroid.i <- k6_norm$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6_norm$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
#analysis of clinton unigram
row_lengths = apply(clinton.bigram, 1, function(z) sqrt(sum(z^2)))
#analysis of clinton unigram
row_lengths = apply(clinton.bigram, 1, function(z) sqrt(sum(z^2)))
clinton.bigram.norm = clinton.bigram/row_lengths
head(clinton.bigram.norm)
k <- 6
set.seed(12345)
k6 <- kmeans(clinton.bigram, centers = k, nstart = 3)
k <- 6
set.seed(12345)
k6.bigram <- kmeans(clinton.bigram, centers = k, nstart = 3)
#Cluster assignments
table(k6.bigram$cluster)
#Within-cluster variation
k6.bigram$withinss
k6.bigram$tot.withinss
clu <- 6
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 1
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 3
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 4
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 5
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 6
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
head(clinton.metadata)
clinton[,'DateSent']
max(clinton[,'DateSent'])
min(clinton[,'DateSent'])
k <- 3
set.seed(12345)
k6 <- kmeans(clinton.unigram, centers = k, nstart = 3)
#Cluster assignments
table(k6$cluster)
#Within-cluster variation
k6$withinss
k6$tot.withinss
clu <- 1
centroid.i <- k6$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 2
centroid.i <- k6$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 3
centroid.i <- k6$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
k <- 4
set.seed(12345)
k6 <- kmeans(clinton.unigram, centers = k, nstart = 3)
k <- 4
set.seed(12345)
kmeans.unigram <- kmeans(clinton.unigram, centers = k, nstart = 3)
#Cluster assignments
table(kmeans.unigram$cluster)
#Within-cluster variation
kmeans.unigram$withinss
kmeans.unigram$tot.withinss
clu <- 3
centroid.i <- kmeans.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.unigram$centers, 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
k <- 4
set.seed(12345)
#eliminate rows with NA
clinton.unigram.norm.omitNA <- clinton.unigram.norm[complete.cases(clinton.unigram.norm), ]
kmeans.norm.unigram <- kmeans(clinton.unigram.norm.omitNA, centers = k, nstart = 3)
#Cluster assignments
table(kmeans.norm.unigram$cluster)
#Within-cluster variation
kmeans.norm.unigram$withinss
kmeans.norm.unigram$tot.withinss
clu <- 3
centroid.i <- kmeans.norm.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.norm.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 4
centroid.i <- kmeans.norm.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.norm.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
k <- 6
set.seed(12345)
#eliminate rows with NA
clinton.unigram.norm.omitNA <- clinton.unigram.norm[complete.cases(clinton.unigram.norm), ]
kmeans.norm.unigram <- kmeans(clinton.unigram.norm.omitNA, centers = k, nstart = 3)
#Cluster assignments
table(kmeans.norm.unigram$cluster)
#Within-cluster variation
kmeans.norm.unigram$withinss
kmeans.norm.unigram$tot.withinss
k <- 4
set.seed(12345)
#eliminate rows with NA
clinton.unigram.norm.omitNA <- clinton.unigram.norm[complete.cases(clinton.unigram.norm), ]
kmeans.norm.unigram <- kmeans(clinton.unigram.norm.omitNA, centers = k, nstart = 3)
#Cluster assignments
table(kmeans.unigram$cluster)
#Within-cluster variation
kmeans.unigram$withinss
kmeans.unigram$tot.withinss
k <- 6
set.seed(12345)
kmeans.unigram <- kmeans(clinton.unigram, centers = k, nstart = 3)
k <- 4
set.seed(12345)
kmeans.unigram <- kmeans(clinton.unigram, centers = k, nstart = 3)
#Cluster assignments
table(kmeans.unigram$cluster)
#Within-cluster variation
kmeans.unigram$withinss
kmeans.unigram$tot.withinss
k <- 10
set.seed(12345)
kmeans.unigram <- kmeans(clinton.unigram, centers = k, nstart = 3)
#Cluster assignments
table(kmeans.unigram$cluster)
#Within-cluster variation
kmeans.unigram$withinss
kmeans.unigram$tot.withinss
k <- 4
set.seed(12345)
kmeans.unigram <- kmeans(clinton.unigram, centers = k, nstart = 3)
#Cluster assignments
table(kmeans.unigram$cluster)
#Within-cluster variation
kmeans.unigram$withinss
kmeans.unigram$tot.withinss
clu <- 3
centroid.i <- kmeans.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
k <- 4
set.seed(12345)
#eliminate rows with NA
clinton.unigram.norm.omitNA <- clinton.unigram.norm[complete.cases(clinton.unigram.norm), ]
kmeans.norm.unigram <- kmeans(clinton.unigram.norm.omitNA, centers = k, nstart = 3)
#analysis of clinton unigram
row_lengths = apply(clinton.unigram, 1, function(z) sqrt(sum(z^2)))
clinton.unigram.norm = clinton.unigram/row_lengths
head(clinton.unigram.norm)
row_lengths = apply(clinton.unigram, 1, function(z) sqrt(sum(z^2)))
clinton.unigram.norm = clinton.unigram/row_lengths
k <- 4
set.seed(12345)
#eliminate rows with NA
clinton.unigram.norm.omitNA <- clinton.unigram.norm[complete.cases(clinton.unigram.norm), ]
kmeans.norm.unigram <- kmeans(clinton.unigram.norm.omitNA, centers = k, nstart = 3)
#Cluster assignments
table(kmeans.norm.unigram$cluster)
#Within-cluster variation
kmeans.norm.unigram$withinss
kmeans.norm.unigram$tot.withinss
clu <- 4
centroid.i <- kmeans.norm.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.norm.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 3
centroid.i <- kmeans.norm.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.norm.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 2
centroid.i <- kmeans.norm.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.norm.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 1
centroid.i <- kmeans.norm.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.norm.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
#Evaluate each clustering model using total within-cluster variation (Elbow Method)
with.clu <- c()
kmeans.unigram.list <- list()
for(k in 1:10){
temp.kmeans <- kmeans(clinton.unigram, centers = k, nstart = 3)
kmeans.unigram.list[k] <- temp.kmeans
with.clu[k] <- temp.kmeans$tot.withinss
}
with.clu
kmeans.unigram <- kmeans.unigram.list[10]
kmeans.unigram <- kmeans.unigram.list[[10]]
View(kmeans.unigram.list)
kmeans.unigram <- kmeans(clinton.unigram, centers = 10, nstart = 3)
kmeans.unigram <- kmeans(clinton.unigram, centers = 4, nstart = 3)
clinton <- read.csv("Clinton.csv")
neg <- unlist(read.table("negative-words.txt", stringsAsFactors = F))
pos <- unlist(read.table("positive-words.txt", stringsAsFactors = F))
head(clinton)
#subset of metadata
clinton.metadata <- clinton[1:9]
#subset of unigrams
clinton.unigram <- clinton[10:3009]
#subset of bigrams
clinton.bigram <- clinton[3010:4009]
#subset of trigrams
clinton.trigram <- clinton[4010:4509]
k <- 4
set.seed(12345)
kmeans.unigram <- kmeans(clinton.unigram, centers = k, nstart = 3)
#Evaluate each clustering model by comparing their total within-cluster variations (a.k.a The Elbow Method)
with.clu <- c()
kmeans.unigram.list <- list()
for(k in 1:10){
temp.kmeans <- kmeans(clinton.unigram, centers = k, nstart = 3)
with.clu[k] <- temp.kmeans$tot.withinss
}
clu <- 3
centroid.i <- kmeans.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
row_lengths = apply(clinton.unigram, 1, function(z) sqrt(sum(z^2)))
clinton.unigram.norm = clinton.unigram/row_lengths
k <- 4
set.seed(12345)
#eliminate rows with NA
clinton.unigram.norm.omitNA <- clinton.unigram.norm[complete.cases(clinton.unigram.norm), ]
kmeans.norm.unigram <- kmeans(clinton.unigram.norm.omitNA, centers = k, nstart = 3)
clu <- 1
centroid.i <- kmeans.norm.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.norm.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 2
centroid.i <- kmeans.norm.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.norm.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 3
centroid.i <- kmeans.norm.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.norm.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 4
centroid.i <- kmeans.norm.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.norm.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 5
centroid.i <- kmeans.norm.unigram$centers[clu,]
clu <- 4
centroid.i <- kmeans.norm.unigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(kmeans.norm.unigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
#analysis of clinton unigram
row_lengths = apply(clinton.bigram, 1, function(z) sqrt(sum(z^2)))
clinton.bigram.norm = clinton.bigram/row_lengths
head(clinton.bigram.norm)
k <- 6
set.seed(12345)
k6.bigram <- kmeans(clinton.bigram, centers = k, nstart = 3)
#Cluster assignments
table(k6.bigram$cluster)
#Within-cluster variation
k6.bigram$withinss
k6.bigram$tot.withinss
clu <- 6
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 5
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 4
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 3
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 2
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 1
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
k <- 6
set.seed(12345)
k6.bigram <- kmeans(clinton.bigram.norm, centers = k, nstart = 3)
k <- 6
set.seed(12345)
clinton.bigram.norm.NAomit <- clinton.bigram.norm[complete.cases(clinton.bigram.norm), ]
k6.bigram <- kmeans(clinton.bigram.norm.NAomit, centers = k, nstart = 3)
#Cluster assignments
table(k6.bigram$cluster)
#Within-cluster variation
k6.bigram$withinss
k6.bigram$tot.withinss
clu <- 1
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 2
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 3
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 4
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 5
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
set.seed(100)
textplot_wordcloud(clinton.unigram, min_count = 6, random_order = FALSE,
rotation = .25,
colors = RColorBrewer::brewer.pal(8,"Dark2"))
install.packages("quanteda")
library("quanteda")
set.seed(100)
textplot_wordcloud(clinton.unigram, min_count = 6, random_order = FALSE,
rotation = .25,
colors = RColorBrewer::brewer.pal(8,"Dark2"))
#subset of all tokens
clinton.all <- clinton[10:4509]
clu <- 1
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 2
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 3
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
clu <- 4
centroid.i <- k6.bigram$centers[clu,]
sort(centroid.i, decreasing = T)[1:10]
m.centroid.noti <- apply(k6.bigram$centers[-clu,], 2, mean)
sort(centroid.i - m.centroid.noti, decreasing = T)[1:10]
k <- 10
set.seed(12345)
clinton.bigram.norm.NAomit <- clinton.bigram.norm[complete.cases(clinton.bigram.norm), ]
kmeans.bigram <- kmeans(clinton.bigram.norm.NAomit, centers = k, nstart = 3)
#Cluster assignments
table(kmeans.bigram$cluster)
#Within-cluster variation
kmeans.bigram$withinss
kmeans.bigram$tot.withinss
deleteColumn <- function(keyword, dat){
newDat <- dat[,-which(names(dat) %in% c(keyword))]
}
deleteColumn <- function(keyword, dat){
newDat <- dat[,-which(names(dat) %in% c(keyword))]
}
deleteColumn(clinton)
deleteColumn("the",clinton)
deleteColumn("the",clinton)
deleteColumn <- function(keyword, dat){
newDat <- dat[,-which(names(dat) %in% c(keyword))]
return(newDat)
}
deleteColumn("the",clinton)
deleteColumn("the",dtm_norm)
emails <- read.csv("Clinton.csv")
table(emails$Recipient)
# create normalized version of dtm
dtm <- emails[, 10:3009]
row_lengths = apply(dtm, 1, function(z) sqrt(sum(z^2)))
dtm_norm <- dtm/row_lengths
dtm_norm <- na.omit(dtm_norm)
# SET UP
rm(list = ls())
library(tidyr)
emails <- read.csv("Clinton.csv")
table(emails$Recipient)
# create normalized version of dtm
dtm <- emails[, 10:3009]
row_lengths = apply(dtm, 1, function(z) sqrt(sum(z^2)))
dtm_norm <- dtm/row_lengths
dtm_norm <- na.omit(dtm_norm)
# -------------------------
# SET UP
rm(list = ls())
library(tidyr)
emails <- read.csv("Clinton.csv")
getwd()
setwd(C:\Users\james\Desktop\UCSD\POLI175\DT2)
setwd("C:\Users\james\Desktop\UCSD\POLI175\DT2")
setwd("C:/Users/james/Desktop/UCSD/POLI175/DT2")
# SET UP
rm(list = ls())
library(tidyr)
emails <- read.csv("Clinton.csv")
table(emails$Recipient)
# create normalized version of dtm
dtm <- emails[, 10:3009]
row_lengths = apply(dtm, 1, function(z) sqrt(sum(z^2)))
dtm_norm <- dtm/row_lengths
dtm_norm <- na.omit(dtm_norm)
deleteColumn("the",dtm_norm)
deleteColumn <- function(keyword, dat){
newDat <- dat[,-which(names(dat) %in% c(keyword))]
return(newDat)
}
deleteColumn("the",dtm_norm)
deleteColumn <- function(keyword, dat){
newDat <- dat[,-which(names(dat) %in% c(keyword))]
return(newDat)
}
newDat <- deleteColumn("the",dtm_norm)
View(newDat)
# SET UP
rm(list = ls())
